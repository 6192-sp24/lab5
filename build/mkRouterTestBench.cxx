/*
 * Generated by Bluespec Compiler, version 2023.07-27-gf00d2058 (build f00d2058)
 * 
 * On Tue Mar 26 17:40:43 EDT 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkRouterTestBench.h"


/* String declarations */
static std::string const __str_literal_2("\033[0;33mInsertFlits\033[0m\t data=%0d into East-input port1: target East-output port1",
					 80u);
static std::string const __str_literal_7("\033[0;33mInsertFlits\033[0m\t data=%0d into East-input port1: target North-output port0",
					 81u);
static std::string const __str_literal_5("\033[0;33mInsertFlits\033[0m\t data=%0d into Local-input port4: target Local-output port4",
					 82u);
static std::string const __str_literal_13("\033[0;33mInsertFlits\033[0m\t data=%0d into Local-input port4: target North-output port0",
					  82u);
static std::string const __str_literal_10("\033[0;33mInsertFlits\033[0m\t data=%0d into Local-input port4: target West-output port2",
					  81u);
static std::string const __str_literal_6("\033[0;33mInsertFlits\033[0m\t data=%0d into North-input port0: target East-output port1",
					 81u);
static std::string const __str_literal_1("\033[0;33mInsertFlits\033[0m\t data=%0d into North-input port0: target North-output port0",
					 82u);
static std::string const __str_literal_11("\033[0;33mInsertFlits\033[0m\t data=%0d into South-input port2: target East-output port1",
					  81u);
static std::string const __str_literal_8("\033[0;33mInsertFlits\033[0m\t data=%0d into South-input port2: target Local-output port3",
					 82u);
static std::string const __str_literal_12("\033[0;33mInsertFlits\033[0m\t data=%0d into South-input port2: target North-output port0",
					  82u);
static std::string const __str_literal_3("\033[0;33mInsertFlits\033[0m\t data=%0d into South-input port2: target South-output port2",
					 82u);
static std::string const __str_literal_9("\033[0;33mInsertFlits\033[0m\t data=%0d into West-input port3: target South-output port4",
					 81u);
static std::string const __str_literal_4("\033[0;33mInsertFlits\033[0m\t data=%0d into West-input port3: target West-output port3",
					 80u);
static std::string const __str_literal_14("\033[0;34mGetFlits\033[0m \t from port%0d: data=%0d",
					  44u);
static std::string const __str_literal_15("  \033[0;32mPASS\033[0m", 17u);


/* Constructor */
MOD_mkRouterTestBench::MOD_mkRouterTestBench(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_clkCount(simHdl, "clkCount", this, 32u, 0u, (tUInt8)0u),
    INST_flitCount(simHdl, "flitCount", this, 32u, 0u, (tUInt8)0u),
    INST_passed(simHdl, "passed", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_router(simHdl, "router", this),
    INST_sent(simHdl, "sent", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_started(simHdl, "started", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_verify_queue_0_rv(simHdl, "verify_queue_0_rv", this, 38u, 45812984490llu, (tUInt8)0u),
    INST_verify_queue_1_rv(simHdl, "verify_queue_1_rv", this, 38u, 45812984490llu, (tUInt8)0u),
    INST_verify_queue_2_rv(simHdl, "verify_queue_2_rv", this, 38u, 45812984490llu, (tUInt8)0u),
    INST_verify_queue_3_rv(simHdl, "verify_queue_3_rv", this, 38u, 45812984490llu, (tUInt8)0u),
    INST_verify_queue_4_rv(simHdl, "verify_queue_4_rv", this, 38u, 45812984490llu, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 21u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkRouterTestBench::init_symbols_0()
{
  init_symbol(&symbols[0u], "clkCount", SYM_MODULE, &INST_clkCount);
  init_symbol(&symbols[1u], "flitCount", SYM_MODULE, &INST_flitCount);
  init_symbol(&symbols[2u], "passed", SYM_MODULE, &INST_passed);
  init_symbol(&symbols[3u], "RL_doCount", SYM_RULE);
  init_symbol(&symbols[4u], "RL_done", SYM_RULE);
  init_symbol(&symbols[5u], "RL_getFlits_port", SYM_RULE);
  init_symbol(&symbols[6u], "RL_getFlits_port_1", SYM_RULE);
  init_symbol(&symbols[7u], "RL_getFlits_port_2", SYM_RULE);
  init_symbol(&symbols[8u], "RL_getFlits_port_3", SYM_RULE);
  init_symbol(&symbols[9u], "RL_getFlits_port_4", SYM_RULE);
  init_symbol(&symbols[10u], "RL_init", SYM_RULE);
  init_symbol(&symbols[11u], "RL_rl_insertFlits", SYM_RULE);
  init_symbol(&symbols[12u], "router", SYM_MODULE, &INST_router);
  init_symbol(&symbols[13u], "sent", SYM_MODULE, &INST_sent);
  init_symbol(&symbols[14u], "started", SYM_MODULE, &INST_started);
  init_symbol(&symbols[15u], "verify_queue_0_rv", SYM_MODULE, &INST_verify_queue_0_rv);
  init_symbol(&symbols[16u], "verify_queue_1_rv", SYM_MODULE, &INST_verify_queue_1_rv);
  init_symbol(&symbols[17u], "verify_queue_2_rv", SYM_MODULE, &INST_verify_queue_2_rv);
  init_symbol(&symbols[18u], "verify_queue_3_rv", SYM_MODULE, &INST_verify_queue_3_rv);
  init_symbol(&symbols[19u], "verify_queue_4_rv", SYM_MODULE, &INST_verify_queue_4_rv);
  init_symbol(&symbols[20u], "x__h5204", SYM_DEF, &DEF_x__h5204, 32u);
}


/* Rule actions */

void MOD_mkRouterTestBench::RL_init()
{
  tUInt8 DEF_router_isInited____d3;
  DEF_router_isInited____d3 = INST_router.METH_isInited();
  if (DEF_router_isInited____d3)
    INST_started.METH_write((tUInt8)1u);
}

void MOD_mkRouterTestBench::RL_doCount()
{
  tUInt32 DEF_x__h1463;
  DEF_x__h5204 = INST_clkCount.METH_read();
  DEF_x__h1463 = DEF_x__h5204 + 1u;
  INST_clkCount.METH_write(DEF_x__h1463);
}

void MOD_mkRouterTestBench::RL_rl_insertFlits()
{
  tUInt8 DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6___d121;
  tUInt8 DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d91;
  tUInt8 DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_NOT_clkCou_ETC___d84;
  tUInt8 DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d99;
  tUInt8 DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d115;
  tUInt64 DEF_IF_clkCount_EQ_1_THEN_4294967297_ELSE_IF_clkCo_ETC___d94;
  tUInt64 DEF_IF_clkCount_EQ_1_THEN_8589934594_ELSE_IF_clkCo_ETC___d107;
  tUInt64 DEF_IF_clkCount_EQ_1_THEN_17179869187_ELSE_IF_clkC_ETC___d113;
  tUInt64 DEF_IF_clkCount_EQ_1_THEN_34359738372_ELSE_IF_clkC_ETC___d120;
  tUInt64 DEF_IF_clkCount_EQ_1_THEN_68719476741_ELSE_IF_clkC_ETC___d125;
  tUInt8 DEF_clkCount_EQ_4___d38;
  tUInt8 DEF_clkCount_EQ_5___d39;
  tUInt64 DEF_IF_clkCount_EQ_1_THEN_141733920769_ELSE_IF_clk_ETC___d88;
  tUInt64 DEF_IF_clkCount_EQ_1_THEN_146028888066_ELSE_IF_clk_ETC___d104;
  tUInt64 DEF_IF_clkCount_EQ_1_THEN_154618822659_ELSE_IF_clk_ETC___d110;
  tUInt64 DEF_IF_clkCount_EQ_1_THEN_171798691844_ELSE_IF_clk_ETC___d117;
  tUInt64 DEF_IF_clkCount_EQ_1_THEN_206158430213_ELSE_154618_ETC___d122;
  DEF_x__h5204 = INST_clkCount.METH_read();
  DEF_clkCount_EQ_1___d6 = DEF_x__h5204 == 1u;
  DEF_IF_clkCount_EQ_1_THEN_206158430213_ELSE_154618_ETC___d122 = DEF_clkCount_EQ_1___d6 ? 206158430213llu : 154618822665llu;
  switch (DEF_x__h5204) {
  case 1u:
    DEF_IF_clkCount_EQ_1_THEN_171798691844_ELSE_IF_clk_ETC___d117 = 171798691844llu;
    break;
  case 2u:
    DEF_IF_clkCount_EQ_1_THEN_171798691844_ELSE_IF_clk_ETC___d117 = 206158430216llu;
    break;
  default:
    DEF_IF_clkCount_EQ_1_THEN_171798691844_ELSE_IF_clk_ETC___d117 = 171798691855llu;
  }
  switch (DEF_x__h5204) {
  case 1u:
    DEF_IF_clkCount_EQ_1_THEN_154618822659_ELSE_IF_clk_ETC___d110 = 154618822659llu;
    break;
  case 2u:
    DEF_IF_clkCount_EQ_1_THEN_154618822659_ELSE_IF_clk_ETC___d110 = 171798691850llu;
    break;
  case 3u:
    DEF_IF_clkCount_EQ_1_THEN_154618822659_ELSE_IF_clk_ETC___d110 = 154618822670llu;
    break;
  default:
    DEF_IF_clkCount_EQ_1_THEN_154618822659_ELSE_IF_clk_ETC___d110 = 154618822675llu;
  }
  switch (DEF_x__h5204) {
  case 1u:
    DEF_IF_clkCount_EQ_1_THEN_141733920769_ELSE_IF_clk_ETC___d88 = 141733920769llu;
    break;
  case 2u:
    DEF_IF_clkCount_EQ_1_THEN_141733920769_ELSE_IF_clk_ETC___d88 = 141733920775llu;
    break;
  case 6u:
    DEF_IF_clkCount_EQ_1_THEN_141733920769_ELSE_IF_clk_ETC___d88 = 141733920785llu;
    break;
  case 7u:
    DEF_IF_clkCount_EQ_1_THEN_141733920769_ELSE_IF_clk_ETC___d88 = 141733920786llu;
    break;
  default:
    DEF_IF_clkCount_EQ_1_THEN_141733920769_ELSE_IF_clk_ETC___d88 = 141733920788llu;
  }
  switch (DEF_x__h5204) {
  case 1u:
    DEF_IF_clkCount_EQ_1_THEN_146028888066_ELSE_IF_clk_ETC___d104 = 146028888066llu;
    break;
  case 2u:
    DEF_IF_clkCount_EQ_1_THEN_146028888066_ELSE_IF_clk_ETC___d104 = 146028888070llu;
    break;
  case 3u:
    DEF_IF_clkCount_EQ_1_THEN_146028888066_ELSE_IF_clk_ETC___d104 = 146028888075llu;
    break;
  case 4u:
    DEF_IF_clkCount_EQ_1_THEN_146028888066_ELSE_IF_clk_ETC___d104 = 146028888076llu;
    break;
  case 5u:
    DEF_IF_clkCount_EQ_1_THEN_146028888066_ELSE_IF_clk_ETC___d104 = 146028888077llu;
    break;
  default:
    DEF_IF_clkCount_EQ_1_THEN_146028888066_ELSE_IF_clk_ETC___d104 = 146028888080llu;
  }
  DEF_clkCount_EQ_2___d36 = DEF_x__h5204 == 2u;
  DEF_clkCount_EQ_3___d37 = DEF_x__h5204 == 3u;
  DEF_clkCount_EQ_7___d42 = DEF_x__h5204 == 7u;
  DEF_clkCount_EQ_5___d39 = DEF_x__h5204 == 5u;
  DEF_clkCount_EQ_6___d41 = DEF_x__h5204 == 6u;
  switch (DEF_x__h5204) {
  case 1u:
    DEF_IF_clkCount_EQ_1_THEN_68719476741_ELSE_IF_clkC_ETC___d125 = 68719476741llu;
    break;
  case 2u:
    DEF_IF_clkCount_EQ_1_THEN_68719476741_ELSE_IF_clkC_ETC___d125 = 34359738378llu;
    break;
  case 3u:
    DEF_IF_clkCount_EQ_1_THEN_68719476741_ELSE_IF_clkC_ETC___d125 = 34359738383llu;
    break;
  default:
    DEF_IF_clkCount_EQ_1_THEN_68719476741_ELSE_IF_clkC_ETC___d125 = 4294967316llu;
  }
  DEF_clkCount_EQ_4___d38 = DEF_x__h5204 == 4u;
  switch (DEF_x__h5204) {
  case 1u:
    DEF_IF_clkCount_EQ_1_THEN_34359738372_ELSE_IF_clkC_ETC___d120 = 34359738372llu;
    break;
  case 2u:
    DEF_IF_clkCount_EQ_1_THEN_34359738372_ELSE_IF_clkC_ETC___d120 = 17179869193llu;
    break;
  case 3u:
    DEF_IF_clkCount_EQ_1_THEN_34359738372_ELSE_IF_clkC_ETC___d120 = 17179869198llu;
    break;
  default:
    DEF_IF_clkCount_EQ_1_THEN_34359738372_ELSE_IF_clkC_ETC___d120 = 17179869203llu;
  }
  switch (DEF_x__h5204) {
  case 1u:
    DEF_IF_clkCount_EQ_1_THEN_17179869187_ELSE_IF_clkC_ETC___d113 = 17179869187llu;
    break;
  case 2u:
    DEF_IF_clkCount_EQ_1_THEN_17179869187_ELSE_IF_clkC_ETC___d113 = 68719476744llu;
    break;
  case 3u:
    DEF_IF_clkCount_EQ_1_THEN_17179869187_ELSE_IF_clkC_ETC___d113 = 8589934605llu;
    break;
  default:
    DEF_IF_clkCount_EQ_1_THEN_17179869187_ELSE_IF_clkC_ETC___d113 = 4294967314llu;
  }
  switch (DEF_x__h5204) {
  case 1u:
    DEF_IF_clkCount_EQ_1_THEN_8589934594_ELSE_IF_clkCo_ETC___d107 = 8589934594llu;
    break;
  case 2u:
    DEF_IF_clkCount_EQ_1_THEN_8589934594_ELSE_IF_clkCo_ETC___d107 = 4294967303llu;
    break;
  case 3u:
    DEF_IF_clkCount_EQ_1_THEN_8589934594_ELSE_IF_clkCo_ETC___d107 = 8589934604llu;
    break;
  default:
    DEF_IF_clkCount_EQ_1_THEN_8589934594_ELSE_IF_clkCo_ETC___d107 = 4294967313llu;
  }
  switch (DEF_x__h5204) {
  case 1u:
    DEF_IF_clkCount_EQ_1_THEN_4294967297_ELSE_IF_clkCo_ETC___d94 = 4294967297llu;
    break;
  case 2u:
    DEF_IF_clkCount_EQ_1_THEN_4294967297_ELSE_IF_clkCo_ETC___d94 = 8589934598llu;
    break;
  case 3u:
    DEF_IF_clkCount_EQ_1_THEN_4294967297_ELSE_IF_clkCo_ETC___d94 = 8589934603llu;
    break;
  default:
    DEF_IF_clkCount_EQ_1_THEN_4294967297_ELSE_IF_clkCo_ETC___d94 = 8589934608llu;
  }
  DEF_clkCount_EQ_8___d43 = DEF_x__h5204 == 8u;
  DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d99 = DEF_clkCount_EQ_1___d6 || (DEF_clkCount_EQ_2___d36 || (DEF_clkCount_EQ_3___d37 || (DEF_clkCount_EQ_4___d38 || (DEF_clkCount_EQ_5___d39 || DEF_clkCount_EQ_6___d41))));
  DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d115 = DEF_clkCount_EQ_1___d6 || (DEF_clkCount_EQ_2___d36 || DEF_clkCount_EQ_3___d37);
  DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_NOT_clkCou_ETC___d84 = DEF_clkCount_EQ_1___d6 || (DEF_clkCount_EQ_2___d36 || (!DEF_clkCount_EQ_3___d37 && (!DEF_clkCount_EQ_4___d38 && (!DEF_clkCount_EQ_5___d39 && (DEF_clkCount_EQ_6___d41 || (DEF_clkCount_EQ_7___d42 || DEF_clkCount_EQ_8___d43))))));
  DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d91 = DEF_clkCount_EQ_1___d6 || (DEF_clkCount_EQ_2___d36 || (DEF_clkCount_EQ_3___d37 || DEF_clkCount_EQ_6___d41));
  DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6___d121 = DEF_clkCount_EQ_1___d6 || DEF_clkCount_EQ_2___d36;
  if (DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_NOT_clkCou_ETC___d84)
    INST_verify_queue_0_rv.METH_port0__write(DEF_IF_clkCount_EQ_1_THEN_141733920769_ELSE_IF_clk_ETC___d88);
  if (DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d91)
    INST_router.METH_dataLinks_0_putFlit(DEF_IF_clkCount_EQ_1_THEN_4294967297_ELSE_IF_clkCo_ETC___d94);
  if (DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d91)
    INST_router.METH_dataLinks_1_putFlit(DEF_IF_clkCount_EQ_1_THEN_8589934594_ELSE_IF_clkCo_ETC___d107);
  if (DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d99)
    INST_verify_queue_1_rv.METH_port0__write(DEF_IF_clkCount_EQ_1_THEN_146028888066_ELSE_IF_clk_ETC___d104);
  if (DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d91)
    INST_verify_queue_2_rv.METH_port0__write(DEF_IF_clkCount_EQ_1_THEN_154618822659_ELSE_IF_clk_ETC___d110);
  if (DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d91)
    INST_router.METH_dataLinks_2_putFlit(DEF_IF_clkCount_EQ_1_THEN_17179869187_ELSE_IF_clkC_ETC___d113);
  if (DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d115)
    INST_verify_queue_3_rv.METH_port0__write(DEF_IF_clkCount_EQ_1_THEN_171798691844_ELSE_IF_clk_ETC___d117);
  if (DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d91)
    INST_router.METH_dataLinks_3_putFlit(DEF_IF_clkCount_EQ_1_THEN_34359738372_ELSE_IF_clkC_ETC___d120);
  if (DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6___d121)
    INST_verify_queue_4_rv.METH_port0__write(DEF_IF_clkCount_EQ_1_THEN_206158430213_ELSE_154618_ETC___d122);
  if (DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d91)
    INST_sent.METH_write((tUInt8)1u);
  if (DEF_clkCount_EQ_1_OR_clkCount_EQ_2_6_OR_clkCount_E_ETC___d91)
    INST_router.METH_dataLinks_4_putFlit(DEF_IF_clkCount_EQ_1_THEN_68719476741_ELSE_IF_clkC_ETC___d125);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_clkCount_EQ_1___d6)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_1, 1u);
    if (DEF_clkCount_EQ_1___d6)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_2, 2u);
    if (DEF_clkCount_EQ_1___d6)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_3, 3u);
    if (DEF_clkCount_EQ_1___d6)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_4, 4u);
    if (DEF_clkCount_EQ_1___d6)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_5, 5u);
    if (DEF_clkCount_EQ_2___d36)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_6, DEF_x__h5204, 6u);
    if (DEF_clkCount_EQ_2___d36)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_7, 7u);
    if (DEF_clkCount_EQ_2___d36)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_8, 8u);
    if (DEF_clkCount_EQ_2___d36)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_9, 9u);
    if (DEF_clkCount_EQ_2___d36)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_10, 10u);
    if (DEF_clkCount_EQ_3___d37)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_6, DEF_x__h5204, 11u);
    if (DEF_clkCount_EQ_3___d37)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_2, 12u);
    if (DEF_clkCount_EQ_3___d37)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_11, 13u);
    if (DEF_clkCount_EQ_3___d37)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_9, 14u);
    if (DEF_clkCount_EQ_3___d37)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_10, 15u);
    if (DEF_clkCount_EQ_6___d41)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_6, 16u);
    if (DEF_clkCount_EQ_6___d41)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_7, 17u);
    if (DEF_clkCount_EQ_6___d41)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_12, 18u);
    if (DEF_clkCount_EQ_6___d41)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_9, 19u);
    if (DEF_clkCount_EQ_6___d41)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_13, 20u);
  }
}

void MOD_mkRouterTestBench::RL_getFlits_port()
{
  tUInt32 DEF_router_dataLinks_0_getFlit_33_BITS_31_TO_0___d134;
  tUInt32 DEF_signed_0___d132;
  tUInt64 DEF_AVMeth_router_dataLinks_0_getFlit;
  DEF_signed_0___d132 = 0u;
  DEF__0_CONCAT_DONTCARE___d131 = 45812984490llu;
  DEF_AVMeth_router_dataLinks_0_getFlit = INST_router.METH_dataLinks_0_getFlit();
  DEF_router_dataLinks_0_getFlit_33_BITS_31_TO_0___d134 = (tUInt32)(DEF_AVMeth_router_dataLinks_0_getFlit);
  INST_verify_queue_0_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d131);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,32",
		   &__str_literal_14,
		   DEF_signed_0___d132,
		   DEF_router_dataLinks_0_getFlit_33_BITS_31_TO_0___d134);
}

void MOD_mkRouterTestBench::RL_getFlits_port_1()
{
  tUInt32 DEF_router_dataLinks_1_getFlit_41_BITS_31_TO_0___d142;
  tUInt32 DEF_signed_1___d140;
  tUInt64 DEF_AVMeth_router_dataLinks_1_getFlit;
  DEF_signed_1___d140 = 1u;
  DEF__0_CONCAT_DONTCARE___d131 = 45812984490llu;
  DEF_AVMeth_router_dataLinks_1_getFlit = INST_router.METH_dataLinks_1_getFlit();
  DEF_router_dataLinks_1_getFlit_41_BITS_31_TO_0___d142 = (tUInt32)(DEF_AVMeth_router_dataLinks_1_getFlit);
  INST_verify_queue_1_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d131);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,32",
		   &__str_literal_14,
		   DEF_signed_1___d140,
		   DEF_router_dataLinks_1_getFlit_41_BITS_31_TO_0___d142);
}

void MOD_mkRouterTestBench::RL_getFlits_port_2()
{
  tUInt32 DEF_router_dataLinks_2_getFlit_49_BITS_31_TO_0___d150;
  tUInt32 DEF_signed_2___d148;
  tUInt64 DEF_AVMeth_router_dataLinks_2_getFlit;
  DEF_signed_2___d148 = 2u;
  DEF__0_CONCAT_DONTCARE___d131 = 45812984490llu;
  DEF_AVMeth_router_dataLinks_2_getFlit = INST_router.METH_dataLinks_2_getFlit();
  DEF_router_dataLinks_2_getFlit_49_BITS_31_TO_0___d150 = (tUInt32)(DEF_AVMeth_router_dataLinks_2_getFlit);
  INST_verify_queue_2_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d131);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,32",
		   &__str_literal_14,
		   DEF_signed_2___d148,
		   DEF_router_dataLinks_2_getFlit_49_BITS_31_TO_0___d150);
}

void MOD_mkRouterTestBench::RL_getFlits_port_3()
{
  tUInt32 DEF_router_dataLinks_3_getFlit_57_BITS_31_TO_0___d158;
  tUInt32 DEF_signed_3___d156;
  tUInt64 DEF_AVMeth_router_dataLinks_3_getFlit;
  DEF_signed_3___d156 = 3u;
  DEF__0_CONCAT_DONTCARE___d131 = 45812984490llu;
  DEF_AVMeth_router_dataLinks_3_getFlit = INST_router.METH_dataLinks_3_getFlit();
  DEF_router_dataLinks_3_getFlit_57_BITS_31_TO_0___d158 = (tUInt32)(DEF_AVMeth_router_dataLinks_3_getFlit);
  INST_verify_queue_3_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d131);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,32",
		   &__str_literal_14,
		   DEF_signed_3___d156,
		   DEF_router_dataLinks_3_getFlit_57_BITS_31_TO_0___d158);
}

void MOD_mkRouterTestBench::RL_getFlits_port_4()
{
  tUInt32 DEF_router_dataLinks_4_getFlit_65_BITS_31_TO_0___d166;
  tUInt32 DEF_signed_4___d164;
  tUInt64 DEF_AVMeth_router_dataLinks_4_getFlit;
  DEF_signed_4___d164 = 4u;
  DEF__0_CONCAT_DONTCARE___d131 = 45812984490llu;
  DEF_AVMeth_router_dataLinks_4_getFlit = INST_router.METH_dataLinks_4_getFlit();
  DEF_router_dataLinks_4_getFlit_65_BITS_31_TO_0___d166 = (tUInt32)(DEF_AVMeth_router_dataLinks_4_getFlit);
  INST_verify_queue_4_rv.METH_port1__write(DEF__0_CONCAT_DONTCARE___d131);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,-32,32",
		   &__str_literal_14,
		   DEF_signed_4___d164,
		   DEF_router_dataLinks_4_getFlit_65_BITS_31_TO_0___d166);
}

void MOD_mkRouterTestBench::RL_done()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_fdisplay(sim_hdl, this, "32,s", 2147483650u, &__str_literal_15);
    dollar_finish(sim_hdl, "32", 1u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkRouterTestBench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_verify_queue_4_rv.reset_RST(ARG_rst_in);
  INST_verify_queue_3_rv.reset_RST(ARG_rst_in);
  INST_verify_queue_2_rv.reset_RST(ARG_rst_in);
  INST_verify_queue_1_rv.reset_RST(ARG_rst_in);
  INST_verify_queue_0_rv.reset_RST(ARG_rst_in);
  INST_started.reset_RST(ARG_rst_in);
  INST_sent.reset_RST(ARG_rst_in);
  INST_router.reset_RST_N(ARG_rst_in);
  INST_passed.reset_RST(ARG_rst_in);
  INST_flitCount.reset_RST(ARG_rst_in);
  INST_clkCount.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkRouterTestBench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkRouterTestBench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_clkCount.dump_state(indent + 2u);
  INST_flitCount.dump_state(indent + 2u);
  INST_passed.dump_state(indent + 2u);
  INST_router.dump_state(indent + 2u);
  INST_sent.dump_state(indent + 2u);
  INST_started.dump_state(indent + 2u);
  INST_verify_queue_0_rv.dump_state(indent + 2u);
  INST_verify_queue_1_rv.dump_state(indent + 2u);
  INST_verify_queue_2_rv.dump_state(indent + 2u);
  INST_verify_queue_3_rv.dump_state(indent + 2u);
  INST_verify_queue_4_rv.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkRouterTestBench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 19u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_0_CONCAT_DONTCARE___d131", 38u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "clkCount_EQ_1___d6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "clkCount_EQ_2___d36", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "clkCount_EQ_3___d37", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "clkCount_EQ_6___d41", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "clkCount_EQ_7___d42", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "clkCount_EQ_8___d43", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h5204", 32u);
  num = INST_clkCount.dump_VCD_defs(num);
  num = INST_flitCount.dump_VCD_defs(num);
  num = INST_passed.dump_VCD_defs(num);
  num = INST_sent.dump_VCD_defs(num);
  num = INST_started.dump_VCD_defs(num);
  num = INST_verify_queue_0_rv.dump_VCD_defs(num);
  num = INST_verify_queue_1_rv.dump_VCD_defs(num);
  num = INST_verify_queue_2_rv.dump_VCD_defs(num);
  num = INST_verify_queue_3_rv.dump_VCD_defs(num);
  num = INST_verify_queue_4_rv.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_router.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkRouterTestBench::dump_VCD(tVCDDumpType dt,
				     unsigned int levels,
				     MOD_mkRouterTestBench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkRouterTestBench::vcd_defs(tVCDDumpType dt, MOD_mkRouterTestBench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 38u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF__0_CONCAT_DONTCARE___d131) != DEF__0_CONCAT_DONTCARE___d131)
      {
	vcd_write_val(sim_hdl, num, DEF__0_CONCAT_DONTCARE___d131, 38u);
	backing.DEF__0_CONCAT_DONTCARE___d131 = DEF__0_CONCAT_DONTCARE___d131;
      }
      ++num;
      if ((backing.DEF_clkCount_EQ_1___d6) != DEF_clkCount_EQ_1___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_clkCount_EQ_1___d6, 1u);
	backing.DEF_clkCount_EQ_1___d6 = DEF_clkCount_EQ_1___d6;
      }
      ++num;
      if ((backing.DEF_clkCount_EQ_2___d36) != DEF_clkCount_EQ_2___d36)
      {
	vcd_write_val(sim_hdl, num, DEF_clkCount_EQ_2___d36, 1u);
	backing.DEF_clkCount_EQ_2___d36 = DEF_clkCount_EQ_2___d36;
      }
      ++num;
      if ((backing.DEF_clkCount_EQ_3___d37) != DEF_clkCount_EQ_3___d37)
      {
	vcd_write_val(sim_hdl, num, DEF_clkCount_EQ_3___d37, 1u);
	backing.DEF_clkCount_EQ_3___d37 = DEF_clkCount_EQ_3___d37;
      }
      ++num;
      if ((backing.DEF_clkCount_EQ_6___d41) != DEF_clkCount_EQ_6___d41)
      {
	vcd_write_val(sim_hdl, num, DEF_clkCount_EQ_6___d41, 1u);
	backing.DEF_clkCount_EQ_6___d41 = DEF_clkCount_EQ_6___d41;
      }
      ++num;
      if ((backing.DEF_clkCount_EQ_7___d42) != DEF_clkCount_EQ_7___d42)
      {
	vcd_write_val(sim_hdl, num, DEF_clkCount_EQ_7___d42, 1u);
	backing.DEF_clkCount_EQ_7___d42 = DEF_clkCount_EQ_7___d42;
      }
      ++num;
      if ((backing.DEF_clkCount_EQ_8___d43) != DEF_clkCount_EQ_8___d43)
      {
	vcd_write_val(sim_hdl, num, DEF_clkCount_EQ_8___d43, 1u);
	backing.DEF_clkCount_EQ_8___d43 = DEF_clkCount_EQ_8___d43;
      }
      ++num;
      if ((backing.DEF_x__h5204) != DEF_x__h5204)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h5204, 32u);
	backing.DEF_x__h5204 = DEF_x__h5204;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF__0_CONCAT_DONTCARE___d131, 38u);
      backing.DEF__0_CONCAT_DONTCARE___d131 = DEF__0_CONCAT_DONTCARE___d131;
      vcd_write_val(sim_hdl, num++, DEF_clkCount_EQ_1___d6, 1u);
      backing.DEF_clkCount_EQ_1___d6 = DEF_clkCount_EQ_1___d6;
      vcd_write_val(sim_hdl, num++, DEF_clkCount_EQ_2___d36, 1u);
      backing.DEF_clkCount_EQ_2___d36 = DEF_clkCount_EQ_2___d36;
      vcd_write_val(sim_hdl, num++, DEF_clkCount_EQ_3___d37, 1u);
      backing.DEF_clkCount_EQ_3___d37 = DEF_clkCount_EQ_3___d37;
      vcd_write_val(sim_hdl, num++, DEF_clkCount_EQ_6___d41, 1u);
      backing.DEF_clkCount_EQ_6___d41 = DEF_clkCount_EQ_6___d41;
      vcd_write_val(sim_hdl, num++, DEF_clkCount_EQ_7___d42, 1u);
      backing.DEF_clkCount_EQ_7___d42 = DEF_clkCount_EQ_7___d42;
      vcd_write_val(sim_hdl, num++, DEF_clkCount_EQ_8___d43, 1u);
      backing.DEF_clkCount_EQ_8___d43 = DEF_clkCount_EQ_8___d43;
      vcd_write_val(sim_hdl, num++, DEF_x__h5204, 32u);
      backing.DEF_x__h5204 = DEF_x__h5204;
    }
}

void MOD_mkRouterTestBench::vcd_prims(tVCDDumpType dt, MOD_mkRouterTestBench &backing)
{
  INST_clkCount.dump_VCD(dt, backing.INST_clkCount);
  INST_flitCount.dump_VCD(dt, backing.INST_flitCount);
  INST_passed.dump_VCD(dt, backing.INST_passed);
  INST_sent.dump_VCD(dt, backing.INST_sent);
  INST_started.dump_VCD(dt, backing.INST_started);
  INST_verify_queue_0_rv.dump_VCD(dt, backing.INST_verify_queue_0_rv);
  INST_verify_queue_1_rv.dump_VCD(dt, backing.INST_verify_queue_1_rv);
  INST_verify_queue_2_rv.dump_VCD(dt, backing.INST_verify_queue_2_rv);
  INST_verify_queue_3_rv.dump_VCD(dt, backing.INST_verify_queue_3_rv);
  INST_verify_queue_4_rv.dump_VCD(dt, backing.INST_verify_queue_4_rv);
}

void MOD_mkRouterTestBench::vcd_submodules(tVCDDumpType dt,
					   unsigned int levels,
					   MOD_mkRouterTestBench &backing)
{
  INST_router.dump_VCD(dt, levels, backing.INST_router);
}
