/*
 * Generated by Bluespec Compiler, version 2023.07-27-gf00d2058 (build f00d2058)
 * 
 * On Tue Mar 26 17:40:43 EDT 2024
 * 
 */

/* Generation options: */
#ifndef __mkCrossbarBuffer_h__
#define __mkCrossbarBuffer_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkCrossbarBuffer module */
class MOD_mkCrossbarBuffer : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt64> INST_buffer_port_0;
  MOD_Wire<tUInt64> INST_buffer_port_1;
  MOD_Wire<tUInt64> INST_buffer_port_2;
  MOD_Wire<tUInt64> INST_buffer_port_3;
  MOD_Wire<tUInt64> INST_buffer_port_4;
  MOD_Wire<tUInt64> INST_buffer_port_5;
  MOD_Reg<tUInt8> INST_buffer_readBeforeLaterWrites_0;
  MOD_Reg<tUInt8> INST_buffer_readBeforeLaterWrites_1;
  MOD_Reg<tUInt8> INST_buffer_readBeforeLaterWrites_2;
  MOD_Reg<tUInt8> INST_buffer_readBeforeLaterWrites_3;
  MOD_Reg<tUInt8> INST_buffer_readBeforeLaterWrites_4;
  MOD_Reg<tUInt8> INST_buffer_readBeforeLaterWrites_5;
  MOD_Reg<tUInt64> INST_buffer_register;
 
 /* Constructor */
 public:
  MOD_mkCrossbarBuffer(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_NOT_buffer_readBeforeLaterWrites_5_read__0___d21;
  tUInt8 DEF_IF_buffer_port_4_whas_THEN_buffer_port_4_wget__ETC___d32;
  tUInt64 DEF_buffer_register___d13;
  tUInt64 DEF_buffer_port_4_wget____d4;
  tUInt64 DEF_buffer_port_3_wget____d6;
  tUInt64 DEF_buffer_port_2_wget____d8;
  tUInt64 DEF_buffer_port_1_wget____d10;
  tUInt64 DEF_buffer_port_0_wget____d12;
  tUInt8 DEF_buffer_port_4_whas____d3;
  tUInt8 DEF_buffer_port_3_whas____d5;
  tUInt8 DEF_buffer_port_2_whas____d7;
  tUInt8 DEF_buffer_port_1_whas____d9;
  tUInt8 DEF_buffer_port_0_whas____d11;
  tUInt8 DEF_buffer_register_3_BIT_37___d27;
  tUInt8 DEF_IF_buffer_port_3_whas_THEN_buffer_port_3_wget__ETC___d31;
  tUInt8 DEF_IF_buffer_port_2_whas_THEN_buffer_port_2_wget__ETC___d30;
  tUInt8 DEF_IF_buffer_port_1_whas_THEN_buffer_port_1_wget__ETC___d29;
  tUInt8 DEF_IF_buffer_port_0_whas__1_THEN_buffer_port_0_wg_ETC___d28;
 
 /* Local definitions */
 private:
  tUInt64 DEF_buffer_register_3_BITS_36_TO_0___d39;
  tUInt64 DEF_IF_buffer_port_3_whas_THEN_buffer_port_3_wget__ETC___d43;
  tUInt64 DEF_IF_buffer_port_2_whas_THEN_buffer_port_2_wget__ETC___d42;
  tUInt64 DEF_IF_buffer_port_1_whas_THEN_buffer_port_1_wget__ETC___d41;
  tUInt64 DEF_IF_buffer_port_0_whas__1_THEN_buffer_port_0_wg_ETC___d40;
 
 /* Rules */
 public:
  void RL_buffer_canonicalize();
 
 /* Methods */
 public:
  tUInt64 METH_getFlit();
  tUInt8 METH_RDY_getFlit();
  void METH_bufferChannel_0_putFlit(tUInt64 ARG_bufferChannel_0_putFlit_flit);
  tUInt8 METH_RDY_bufferChannel_0_putFlit();
  void METH_bufferChannel_1_putFlit(tUInt64 ARG_bufferChannel_1_putFlit_flit);
  tUInt8 METH_RDY_bufferChannel_1_putFlit();
  void METH_bufferChannel_2_putFlit(tUInt64 ARG_bufferChannel_2_putFlit_flit);
  tUInt8 METH_RDY_bufferChannel_2_putFlit();
  void METH_bufferChannel_3_putFlit(tUInt64 ARG_bufferChannel_3_putFlit_flit);
  tUInt8 METH_RDY_bufferChannel_3_putFlit();
  void METH_bufferChannel_4_putFlit(tUInt64 ARG_bufferChannel_4_putFlit_flit);
  tUInt8 METH_RDY_bufferChannel_4_putFlit();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCrossbarBuffer &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkCrossbarBuffer &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkCrossbarBuffer &backing);
};

#endif /* ifndef __mkCrossbarBuffer_h__ */
