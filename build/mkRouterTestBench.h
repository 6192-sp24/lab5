/*
 * Generated by Bluespec Compiler, version 2023.07-27-gf00d2058 (build f00d2058)
 * 
 * On Tue Mar 26 17:40:43 EDT 2024
 * 
 */

/* Generation options: */
#ifndef __mkRouterTestBench_h__
#define __mkRouterTestBench_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkRouter.h"


/* Class declaration for the mkRouterTestBench module */
class MOD_mkRouterTestBench : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_clkCount;
  MOD_Reg<tUInt32> INST_flitCount;
  MOD_Reg<tUInt8> INST_passed;
  MOD_mkRouter INST_router;
  MOD_Reg<tUInt8> INST_sent;
  MOD_Reg<tUInt8> INST_started;
  MOD_CReg<tUInt64> INST_verify_queue_0_rv;
  MOD_CReg<tUInt64> INST_verify_queue_1_rv;
  MOD_CReg<tUInt64> INST_verify_queue_2_rv;
  MOD_CReg<tUInt64> INST_verify_queue_3_rv;
  MOD_CReg<tUInt64> INST_verify_queue_4_rv;
 
 /* Constructor */
 public:
  MOD_mkRouterTestBench(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt32 DEF_x__h5204;
  tUInt8 DEF_clkCount_EQ_1___d6;
  tUInt8 DEF_clkCount_EQ_2___d36;
  tUInt8 DEF_clkCount_EQ_3___d37;
  tUInt8 DEF_clkCount_EQ_7___d42;
  tUInt8 DEF_clkCount_EQ_6___d41;
  tUInt8 DEF_clkCount_EQ_8___d43;
 
 /* Local definitions */
 private:
  tUInt64 DEF__0_CONCAT_DONTCARE___d131;
 
 /* Rules */
 public:
  void RL_init();
  void RL_doCount();
  void RL_rl_insertFlits();
  void RL_getFlits_port();
  void RL_getFlits_port_1();
  void RL_getFlits_port_2();
  void RL_getFlits_port_3();
  void RL_getFlits_port_4();
  void RL_done();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkRouterTestBench &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkRouterTestBench &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkRouterTestBench &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkRouterTestBench &backing);
};

#endif /* ifndef __mkRouterTestBench_h__ */
